{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","audios","chunks","recording","prepareMicrophone","a","navigator","mediaDevices","getUserMedia","audio","stream","mediaRecorder","MediaRecorder","addEventListener","onDataAvailable","onStop","data","blob","Blob","type","url","URL","createObjectURL","Audio","setState","getButton","clickFunction","stop","start","buttonText","onClick","getAudios","map","_","index","play","this","console","log","recordButton","className","e","message","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QA4FeA,E,4MAxFXC,MAAQ,CACJC,OAAQ,GACRC,OAAQ,GACRC,WAAW,G,EAOfC,kB,sBAAoB,4BAAAC,EAAA,sEACKC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IADlD,OACVC,EADU,OAEhB,EAAKC,cAAgB,IAAIC,cAAcF,GACvC,EAAKC,cAAcE,iBAAiB,gBAAiB,EAAKC,iBAC1D,EAAKH,cAAcE,iBAAiB,OAAQ,EAAKE,QAJjC,2C,EAOpBA,OAAS,YAAe,IAAZC,EAAW,EAAXA,KACJd,EAAM,sBAAO,EAAKF,MAAME,QAAlB,CAA0Bc,IAC9BC,EAAO,IAAIC,KAAKhB,EAAQ,CAAEiB,KAAM,cAChCC,EAAMC,IAAIC,gBAAgBL,GAC1BR,EAAQ,IAAIc,MAAMH,GAClBnB,EAAM,sBAAO,EAAKD,MAAMC,QAAlB,CAA0BQ,IACtCP,EAAS,GACT,EAAKsB,SAAS,CAAEvB,SAAQC,Y,EAG5BY,gBAAkB,YAAe,IAAZE,EAAW,EAAXA,KACXd,EAAM,sBAAO,EAAKF,MAAME,QAAlB,CAA0Bc,IACtC,EAAKQ,SAAS,CAAEtB,Y,EAGpBuB,UAAY,SAACtB,GACT,IAAMuB,EAAgBvB,EAAY,EAAKwB,KAAO,EAAKC,MAC7CC,EAAa1B,EAAY,OAAS,QACxC,OAAO,wBAAQ2B,QAASJ,EAAjB,SAAiCG,K,EAG5CF,KAAO,WACuD,OAAvB,EAAKhB,gBAGsB,aAA7B,EAAKA,cAAcX,QAGpD,EAAKW,cAAcgB,OACnB,EAAKH,SAAS,CAAErB,WAAW,O,EAG/ByB,MAAQ,WACsD,OAAvB,EAAKjB,gBAGmB,cAA7B,EAAKA,cAAcX,QAGjD,EAAKW,cAAciB,QACnB,EAAKJ,SAAS,CAAErB,WAAW,O,EAG/B4B,UAAY,SAAC9B,GACT,OAAOA,EAAO+B,KAAI,SAACC,EAAGC,GAClB,OACI,8BACI,wBAAQJ,QAAS,kBAAM,EAAK9B,MAAMC,OAAOiC,GAAOC,QAAhD,SAAyDD,KADnDA,O,uDAzDtB,WACIE,KAAKhC,sB,oBA+DT,WACI,IAAK,IAAD,EACAiC,QAAQC,IAAR,UAAYF,KAAKzB,qBAAjB,aAAY,EAAoBX,OAChC,IAAMuC,EAAeH,KAAKX,UAAUW,KAAKpC,MAAMG,WACzCF,EAASmC,KAAKL,UAAUK,KAAKpC,MAAMC,QAEzC,OACI,sBAAKuC,UAAU,MAAf,UACKD,EACAtC,KAGX,MAAOwC,GACL,OAAO,8BAAMA,EAAEC,e,GApFTC,aCSHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.360acf7b.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n    state = {\n        audios: [],\n        chunks: [],\n        recording: false,\n    };\n\n    componentDidMount() {\n        this.prepareMicrophone();\n    }\n\n    prepareMicrophone = async () => {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.mediaRecorder.addEventListener(\"dataavailable\", this.onDataAvailable);\n        this.mediaRecorder.addEventListener(\"stop\", this.onStop);\n    };\n\n    onStop = ({ data }) => {\n        let chunks = [...this.state.chunks, data];\n        const blob = new Blob(chunks, { type: \"audio/mp4\" });\n        const url = URL.createObjectURL(blob);\n        const audio = new Audio(url);\n        const audios = [...this.state.audios, audio];\n        chunks = [];\n        this.setState({ audios, chunks });\n    };\n\n    onDataAvailable = ({ data }) => {\n        const chunks = [...this.state.chunks, data];\n        this.setState({ chunks });\n    };\n\n    getButton = (recording) => {\n        const clickFunction = recording ? this.stop : this.start;\n        const buttonText = recording ? \"Stop\" : \"Start\";\n        return <button onClick={clickFunction}>{buttonText}</button>;\n    };\n\n    stop = () => {\n        const MicrophoneIsNotInitialized = this.mediaRecorder === null;\n        if (MicrophoneIsNotInitialized) return;\n\n        const MicrophoneIsNotRecording = this.mediaRecorder.state === \"inactive\";\n        if (MicrophoneIsNotRecording) return;\n\n        this.mediaRecorder.stop();\n        this.setState({ recording: false });\n    };\n\n    start = () => {\n        const MicrophoneIsNotInitialized = this.mediaRecorder === null;\n        if (MicrophoneIsNotInitialized) return;\n\n        const MicrophoneIsRecording = this.mediaRecorder.state === \"recording\";\n        if (MicrophoneIsRecording) return;\n\n        this.mediaRecorder.start();\n        this.setState({ recording: true });\n    };\n\n    getAudios = (audios) => {\n        return audios.map((_, index) => {\n            return (\n                <div key={index}>\n                    <button onClick={() => this.state.audios[index].play()}>{index}</button>\n                </div>\n            );\n        });\n    };\n\n    render() {\n        try {\n            console.log(this.mediaRecorder?.state);\n            const recordButton = this.getButton(this.state.recording);\n            const audios = this.getAudios(this.state.audios);\n\n            return (\n                <div className=\"App\">\n                    {recordButton}\n                    {audios}\n                </div>\n            );\n        } catch (e) {\n            return <div>{e.message}</div>;\n        }\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}